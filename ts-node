                                                  ........................#.#...........#........#.#.......#......#......#........#..#........#.......
                                                  ....#.........#....##....#......#................................................................#..
                                                  ....#...#.#................##...#..#.....#.#..#.............#...........#...#..##......##.....#.#...
                                                  .#.......#.........#...##....#.............#..#...#....#..........#.......#.............#...........
                                                  .##..............#.#.#.....#........#.##.#.........#.........#.......#.....#........#.....#.#.......
                                                  ........#.........................#..........#..............#.........#...#...............#........#
                                                  ......#...#...........##.................#.....#....##.....#.............#.......#..#........#......
                                                  .............#.........#.#.....#.......#....#.............#..#.##.......#....#...............#......
                                                  #.............................#........#........#.......#...........#..#....#................#......
                                                  .......................##...#.#.........#..............#............................................
                                                  ...........................#.#...#..#....#..#.....#.........................#...............#......#
                                                  ..#..#......#.#..................................##.......#.............#....#.#....................
                                                  ....#.....#.#..................#..................#...#........#..#............................#.#..
                                                  ...................#.#........#.........#.#...........#......#............#..#......................
                                                  ..............##..###.................................................#.......##....................
                                                  .....#.#.....#.......#..........#...#.##....#.........#.....#.........#.........................##..
                                                  .#.......#................#.....#.....#..##........#..................#.....##.........#.....#......
                                                  ........#................#.....#..##.....#..............................#...#.............#...#..#..
                                                  .#.................##.#.......#........................#.#...................#.#...#........#.#.....
                                                  .........#..#...................................#...#...........#..#.#.............#...#............
                                                  #..#......#........#.......................#...................#......................#.............
                                                  ...........................#.............#.......#.....#......#..#.......#...#........#.#...#..#....
                                                  ....#.#...........#................##...............#...#...#......#..#.............................
                                                  ......#.........##...##..................#.........#.................#..............................
                                                  ....................#......................#.#......#.......#.....#..#..............................
                                                  ...................#....#....................#................................................#.....
                                                  #..#......#...........#....................#................#.......#...#...........#.........#.....
                                                  ..............#............#....................#.#..#.............#.............#..#...........#...
                                                  ..........#..#.##..........#....................#....#...#......................#.................#.
                                                  ............#...............#......##............................................#........#.........
                                                  ....#..#...................#..#......#.....#...#.#....#.........#..#........#...........#.........#.
                                                  ..........#...........#.#......................#..........................#.#.......................
                                                  #................#.....#...#.......................#...............#........#.#.....#..........#....
                                                  .......#...........................#......................#...#.#..............#.....#..............
                                                  ...#.....#.....................#.........#....#.....#....#........##.........#.#.#.................#
                                                  ####............#.#............#...#........#....#...#.......#..................#............##.....
                                                  ..........................#...................................#...............#........#...#........
                                                  .......#....#.........................#...#............................#.......................#....
                                                  ........#.....................#..#...#.............#..##.#...#....#..#..........#.#.............#...
                                                  ....#............#...#............#.............................#...................#....#......#.#.
                                                  ........#.........#...#.#........#..#.......#..........#..........#..#...#..........#...............
                                                  ........#.............................#...............#............#.......................#..#..#..
                                                  #............#.....#..................#.............##.#............#...#..#.#........#.............
                                                  ............................#..........................#.........#.................#.......#....#...
                                                  ..#.#..............................................#...................#......#..#........#........#
                                                  ..#.....#.#............#.#.#.#.............#...........................#...........#.#.#...#........
                                                  ....#...#.........##.........#..#......#...........#.........##......................#..............
                                                  .#.....#................#............##..#........#....#.#...............#.##...#...........#......#
                                                  ...#.......#...........................#..................#.#..##.#...#.#...........................
                                                  ..............................#.....#...#.......#.........#...........#.......#.....................
                                                  ...........#.....#........#.........#.....#.....#.
                                                  ...........#.........#....................#.......
                                                  ...........#...........#.........................#
                                                  ...#......#......#............#...................
                                                  ........#............................#.#.........#
                                                  #..................#...................#.#........
                                                  ...#................#...#...#..#.......#.#......#.
                                                  ...#.......#............#...#.....................
                                                  ........#.................##......................
                                                  .#...#.........#..........#.......#.......#.......
                                                  ..................##.##.........#.................
                                                  .#.#..............................#.....##..#..#..
                                                  ..........................#....##...#.......#.#...
                                                  .........#....#.....#..........................#..
                                                  .......#.....#.................#.#.##.............
                                                  .............#..........#.....#...................
                                                  .......#.#.........#.....#................###.#...
                                                  .................................#................
                                                  ..............#...#..#............................
                                                  .............#........#..........#....#...........
                                                  ................#..........#..#...##....#........#
                                                  .......#.#.......................#....#..........#
                                                  ..................................................
                                                  ...........................#.......#...#.....#....
                                                  ........##..............#.#...#.......##..#.......
                                                  .....................#.....#........#.............
                                                  ...#.......................#.......#.....#..#..#..
                                                  ..##...........#................#.#...............
                                                  .........................#.#....#.#.........##....
                                                  ..#......#........#...#....#..#...#.............#.
                                                  .....#.......#............###...................#.
                                                  ...#............#...........#.......#......#......
                                                  .........#.....##..........##............#........
                                                  ..#..##...#..................#.#.........#....#...
                                                  .......#....#............................#..#.....
                                                  ...#....#...........#.#........#.................#
                                                  ......#........#.....#........#...................
                                                  ............#..........#....#..#...........#......
                                                  ................#....#.....#........#...........#.
                                                  ...##....#................#.#.....#.............#.
                                                  ..............................................#..#
                                                  ..#..#..#..#..#...................................
                                                  .............#..............................#.....
                                                  ..#...#....#...........##......#..............#...
                                                  .........##....#...........................#.....#
                                                  ...........................##.........#........#..
                                                  ......#.............#........#..........#....#....
                                                  ................................#............#....
                                                  ...........#..#...........#...#.#.........#.......
                                                  ...................#.#.#........#.............##..
.#..........#..............................#..........#...#.#..#...#.......#............##..........
..##...........#.........#.........................##......#.............#................#.........
#.#.........#.....#.#............#.........#.#.#....##..............#........#.#..#.................
..............................#..#.......................................#....##.....#........#.....
............................##....#..##.....###.....#.......##...#...............................#..
...........#....#...........#.......#..........#.........#........#.............#.........#.........
.............................#...........................#.........#..................#....##.......
.................#...................#...........#.............#...............#....................
..............#................#.............#......#....#..........#.#..#.......................#..
.#........#...##.......#.#...#......#...........#...................#....#......##...#..............
............#..#.#......#..#.................#....#.....#.#..#.......................#..............
#.#..#.#.........#........#...........#.#.....#...#..#........#..#........#.......#.#.......#.......
.......##.......#.........#..#.......#...........#...............#..................................
...........#.........#.................#.......#..#.#......#...............#.#......................
.............#........#..........##.......................#...#..............#....................#.
......#...#.#....#......#........#.......#.................#.....#....#..#..#.....#.......#.........
.......#.##.............##.#...##....#.#........#.........#..............#...#......#...............
...#..................#.#.......#.............#.............#......................................#
.#............#..........#...........#.#.............#..#.......................................#...
.....#.##...#...#...............#.....................#...#.#.....#....................#............
........#......................................#...........#......#..#..##...........#....#..#......
..#...................#................#.................................#..........................
.#.......................#.......#......#.........................#.................................
...#...#...................#...........#....#........#....#..............#.......#..................
.....#....................#..........#..#........#...........................#..#...#.......#...#..#
.........#...........#...#...#............#...................#.............#....................#.#
..#....#.....#.#.......#................#...#.............#.............##......#.................##
....##...#...............##..........#....#.........#.....#...............#........#...............#
.....#.................#.......#.................#.............#.#....#....................#.#......
.........#...#...#......................................#.....................#.....................
.........#..............#.....#.............................#....#.....#............#.............#.
............#.#......#.....#...........................#........##.......................#....#..#..
........................#.............#..........#.#...........#..#....................#.##....#....
........##.#....#................##.........................#........#...........#.......#.........#
.#..........#....#...........#...........#..........................#.........##...........#........
...#....#..#.................................#......#.........#.#....#.........##.....#.......#.....
#.....#....#......#...#.........#...........#..#............###........#...........##......##.#...#.
.......#.#.....#....................................#....#....................##.#..................
#....................................##.....................##....#...........#..........#..........
.........................#......#....#...........#..#......#.........#........#..#...............#..
...#....#.........#..................#..................................#.....#.......#.#.#.........
........................#....................#..#...............#............#......#............#.#
#.................#......................#..........#.........#.......................#.......#.....
..#....................#.................#.....#..........#...............##.#............#.........
...........................#......#..............#.....#...#......................................#.
..................#..#..#...................#..#...#......#..#.........#..##..#...#....#............
...#........#.#......#....#...................#........#.#...#..................#............#......
....................#..........#..#........#....#.......#..........................#.........#......
.......#...#..........................#........##............#..#................................#..
........##.......#................#.....##..#...........##.............#...##........#.....#.......#
#.................#....#..............#...#.......
..............................#..................#
#........................#....##...#........##....
............#.....................................
............#....................................#
...#.#..............#..............#..............
...........................##....................#
......#.#.......#..................#.....#...##..#
......#..............#..#.............#...........
.....#.....##.....#...............................
.............................#....#...#...........
........#.........................................
................#..........................##.....
.#............##.#..............#.#...#........#..
.......#....#...#.....##.#...#...#................
................#.#...................##..........
..............................#...................
..............##.................#..........#..#..
..#..................................#............
..........................................#..#....
...#......#...#....#..............#.............#.
.#....#..#...............................#........
.......#.#.....................#.......#..........
....#................#............................
.......##.....##....#................#............
...#........#........#......#...#.#.........#.....
......##.#................#...............#.#.....
....#.#........#................#...........##....
..#......................#....#.................#.
..................#.............#..........#......
....#.....#.......................................
....#.......##..#.#..#.......................#....
.................#...........#.....#.....#......#.
.......#.........#.......#.##....#........#.......
................#.......#...................#.....
#.#..................................#......#.#...
#........#..##.......##..#........#............#..
#..............................................#..
.#.....#.......#..##........#..#..............#...
.........#.......#...#.....#.#...#................
.................................#..........#.....
#...#..............##..............#....#.........
.............................#........#....#...#..
...#....#..............#...........#......#.......
....#......................#.......#...#..........
...#.............#......#.#.......#..#.......#..##
.......#...........................#............#.
........#.......................#.................
..........#..#...#......##.........#........##....
.#.....#....###.............#.##..................

16L48L13R34L44L21R31R17R42R37R48L39L40R16R29L12R23R8L42R19L26L31L34R8L37R35R22R22L34R4L11R28L42L30L42L24L40R31L14L2L46L1L15R45R4L44R6L13R20L38R16R26L8L6R15L47R10L13R30R27L21L5R16R23R24L23L13L3R14R3R41R17R18R35R45R50L10R28R28R23R29R43R33R6R10R3R49R48R17R18R10L10R36L24R43L41L15R35L16R47R27L1R24L6R50R30L35R46R9L5R8L49R45L9R41L29L25L46R17L47L32R25L7R24R33L23L20L12R43L16L8R38L9L30L33R4R41L6L41L49L36L34L41R12L12R41R23R29L24R39L17L9R4R17L10L30R43R27L29R39R44L16L24R28L14L14L45L6R4L26R17L22L28L31L33R14L21R24L10R20L17R5R18L41L20L1R39R23R8R21L47R21L12R5R1L14L23R50L2L43L45L14L15L50R18R21L39L24R8R7L13R33L15L40R29L34R38R42L5L17R28R49R35L45L4L1R8L33R22L12R37R26L48R45L47R39R35L50R18L22L19R31R10L7L10L27L28R6R28L48R28L44L11L37R48R33L13L23L45L7R34L24R10R47R21R39L11R12R14R7R39L50R39R40R50R3L20L15R6L14R31R30L19R14L2L23R6R5R50R42L4L13R18L45R4R44R15R28R27L35L25R15R18L37R31L38L23L21L36L7R17R24L22L18R19L43L7L1R26L6R42R2R38L9L30R13R37R34L41R20L39R44R11R27L48R30R37L19L30L34L44R17R50R49L46L37L15R35R42R25L19L44L40R5L47R19R44L6R39L1R11R42L27L37R37L41R6R36L47L4R31R34R3R32R7L46R8R3R48L33R39L29R43R40R39L5L25R42L37R15R32R50L36R38L29L30R6L22L17R28R21L42L44L41R35L40L45L22R28R24L2R29L14L7R31L40L14L13L21R12L40L23R34R22L37L24R34L23R33L41R26R18R34L27L15L21L29R21R30R10L10L19L45L42R3R9R18L39R14L21R6L24R44L7R16R24L23L14L28R34R33L26L44R36L23L17L40L23R10L49L8L2L22L45R34L46L1R41L37R26L22L31R12R29R24R44R26L22R20R9L6L36R23R21R44L26R9R32L9R23R15L10L28L48L41R45R35L30L25R41R29L25R23R3R29L30L28L34L29R40L30R40L3R19L36R11L26R48L17L48R12R32R35L26L42R15R6R42R8L49R30R3R14L16L44L8R10L50R18R32R1R29R34R32L24R50R44L13R48L4R20L14L50L15L21R47R3L7R37L15R42R5L40R27L18R3R44L4R47R7R35L46R40R45R24R23R48R9R48R21R7L15L42R27R14R30R48L5L38R5R16L25R22L28R48R17L27R10L25L13R6L7L21R47L43L41R33R6R40R31L32L20L1L16L19R23L28R16R44L26R21R9R29L6L37L31L16L9R37L24L4L19L20R40L3L38L39R17L38L21L26R6R19R12L34L15L31L23L1R8L35R13L23L2L21L20L22R16L49R41R30R13L46R26R50R1R42R40R40R42L22L19R31R4L4L1L45R8L39R3L42R4L44L29R10L17R19L24L43L50R28R8R3L49L8R25R11R14R41L39L47R28R45L34L29R49R38L43L3R15R38L17L37R49R11L8L15L28R3L1R7R1R1L7R17L47L1R28L49L18L20R43R30L20L37R18L3L16R32L9R48L21L22R35L46L31R20L13L16R46R9R49L32L38R42L13L1R16R10L14L45L27L1R4R10R6L38R42L25L33L15L11R17R34L12R47L46R41L42L19L26R22R28R37L26R41L21R8L25R18R26R37R18L38R5R3R8L25R20R2R38R50R17L36L9L6R44R23R5L38L37L1L1L30R28L19L33L25R35R23R32L50L46L42L4L9R12L46L7L2L2R45R11L19R2R47R33R11R25R42R8R41L24R36R7L45L29L20L35L28R3R43R33R25R25L1R33R2R34R25R24R35L46R6L48R37L21R45R5L41L44R32R46L17R5R19R47R39L4R20R26R8R24L30L15R29R5R7R33R30L49R34L48L2L47R1L15L1L25L47R15L14R1R15R20R42R10R44L7L46L28L15R42L3L44L49R14L28R43R33R33R26R3R9R36R24L1L45L26L25L39L15L1R40R47R30L7R25L50R38R6L33R48R28L2L11L41L14R43L48L11L47L39L18R15L23R26R44L27L17L45L21R6R16L37L6L37R50L39L34R34L19R19R32R14R43L16L19L20L44L40L11R49R2L19L17R1L42R9L21L5R2R47L39L29L25L41R19R43R26L41R49R46R9L2R38L22R43R6L5L14R29R27R34R43L25L46R22R13R1R18R28L24R34L45R27L43R6L32L12L35L39L38R16R39L13L36R22L19L20R33L3R13R15R28L45L5R25R9R32L32L34L23R25R43R13L23L45R34R46L9R13R15R9R16R21L38L7L32R1R22R34R44R18L39R43R5R7L19L16L39L26L28L23R41L32R18R22R41L46L34R6L44L29R25R26L5L18R6R44R48R22L47L50R29R24R41L8R48L5R50L49L38R47L39R7L15R23R36R14R48R17R14R32L25L36R10L36R17L30L22R15L19L10L3L24R36R1L6L26L39L48R15L3L26R11R49R2R46R28R18R13L50R39L5R29L31L40L44L43R49L6L26L33L49L30R48R10L4R6L26L15L18L31R20L48R7R17L40R36L41R49L25L21L5R48R19R3L48R46R22R22L50L39R18R17L13L4R5L28R10R40L30R40R19R11R49R9R32L25R48R47L26L40L38R44R22L22R37R3L16R34R11R48L47R2L29R48R31L4R44L40R20L40R30R15R11R43L30R5R40L45R42R39R19R49L41R26L18R17R15L39L26L10R15L30L38L44L47R35R42R40L26R46R11R22R25R28L12R35R1R38L2R40R3L5L15R18R21R46R1R26R42L7L38L11R4L17R45L46L11R39R45R27L8L35R3L50R25R14R3R5R46L6L31R40L28R12L35L1L33L32R49R48L16L20L3R20R50R8L29R44L12R17L12R4L7R2R1R50L30L4L17R12R43L17R4L20L32R46R39L42L18L30L19R15R37L14L5L3R36L31L16L10L10L26R45R19R38L30R49L6L25L30R27L41L17R27R47L37L28R22L44R18L48L44R2L33R2R9L13L1R13L30R43L50R17R32R14R28L1R29L6L2L37R40R12R1L16R32L31L35R10R4R18R41L15L29R3R43L24L29R43L37R33R16L5L12L32R43R43R2R39R41R20R39R6L35R21R44R44L25L31L7L49R42R20L24L3L7R26R35L4L46L37L33R38L33R25L4L1L50L19R3R3R9L25L2R15L7L10R37L5L18R50L23R4L16L19R8R5R36L25L27R18R26L50L46R10R31R31R30R29L24L8L14R40R4R47R5R37R46R35R48L14R23R1L21L47R45R10L8L15R48R15R11L24L39L3R7L38L8L47R37R10R38L34R42R26L17R24R30R41L11L9R50L16L48R5L7R44L11L6R11R22R44R50L5R18R38L46L35L45R9L45L19R22L40R21R23R29L14R35L47R8L8R27R33R22L3L2R19L7R41L33L46L26R9L9L22L15L45L36L46L28R40R10L40R26L47L1R47L25R3R44L35R21L36L43R28L4L21R20L6R2R1R42R10L11R33R44L1R37R48L26L46R11R45L22R18L34R43L26L41L27L14R9R14L2R41R19R47L1R42L11R17R21L12L33L10L30R43R46R47L9R17L14L15L6L43R44L22L40L50L2L19R30L38R48L1R23L32R33R31L45R5L47R1R19R15L40L17R7L10R19R40L29R26R10R21R47L33L22R23L10L1R29R39R14L35L21R18R25L20L46R15L42R6R33R26R10R9R31R32L48R49L15R48L39L41L12L35R24L2L9L27R34L32R6R25L16R47L24R14L48R2R39L2L19L21L23R50R29L44L16R15L14L50R39L13R15L19R46R16R38L8R34R44L46L38L49R7L5R32R47R4R29L24R7R4L30R34R8R15L4R34L25L24L8L10L6R36L18R21R13R50R17L12L50R48L2R31L22L12R31L1L39R19L8R43L15L37L32L34R15R48R39R26L40R20L26L33R21L39R8L38R10L14R41L35R32R23R19R25R26R25L27R26L43R12L45L15L19L39R14L26L9R25R16R33R44R33L17L37R13R29L18L24L2L39L32R17R46L41R31R23R5R17R26R6L36L40R5L33R4R43L45L45R26R47L2L35L36L42R8R32L35L30R42R50R10L44L9L46L25L45L7R18L15R22L47R44L41R41L1R36R19L16R33R40R45R31L23R34L47R13L42L2L32L23R40L14L19R29R50R47L11R40L26L13L1L39R29R43R40R41R4L24R45L8L47L23L45R13L47L25L35L5L23R5L7L5R47R16L34L36L22L31L8R5R21L44R41L41L46R5L7R11R7R44R10L15L48L22L11L9R36L34R25L34R33R33L17R2L50L45L14R12R17L10L47L15R33R25R1R46R20R3L5R42R13R27L22L8L37R3R2R46L3L12R27L5L4R33L18R4R26L30R5L44L10import * as fs from 'fs';


// Directions
enum D {
    Right,
    Down,
    Left,
    Up,
}

// Rotations
enum R {
    I,  // Identity
    R,  // Rotate 90 CW
    H,   // Rotate 180
    L,  // Rotate 90 CCW
}

function rotD(f: D, r: R) {
    return (f + r) % 4;
}

function move(x: number, y: number, f: D) {
    switch (f) {
        case D.Right:
            return [x, y + 1];
        case D.Down:
            return [x + 1, y];
        case D.Left:
            return [x, y - 1];
        case D.Up:
            return [x - 1, y];
    }
}

function mod(x: number, m: number) {
    x %= m;
    if (x < 0) x += m;
    return x;
}

interface Problem {
    // `2d face name,direction` -> [new map face name, rotation]
    transitions: Map<string, [string, R]>;
    // cube edge width, faces are M x M
    M: number;
    // original map with dimensions
    map: string[],
    xMax: number;
    yMax: number;
}

// Description of a face using 3d vertices in {0,1}^3 coordinates.
// {0,1}^3 coordinates are represented as numbers b000(0) to b111(7).
interface Face {
    tl: number;
    tr: number;
    bl: number;
    br: number;
}

const COORDS: {[bits: number]: string} = {0: 'x', 2: 'y', 4: 'z'};
function faceName3d(face: Face): string {
    let mask = 1;
    while (mask < 8) {
        let seen = new Set<number>();
        seen.add(mask & face.tl);
        seen.add(mask & face.tr);
        seen.add(mask & face.bl);
        seen.add(mask & face.br);

        // two dimensions will see both 0 and 1, the third will see only one.
        if (seen.size === 1) {
            return `${COORDS[mask]} = ${[...seen][0] ? 1 : 0}`;
        }
        mask = mask << 1;
    }
    throw new Error('faceName3d: no mask found');
}

/**
 * The most magical function in the program. Given the 4 verices of a face, using numbers b000(0) to b111(7)
 * we can use bit operations to get the 4 vertices of any adjacent face in direction d.
 * 
 * The general observation is that any vertex plus its three neighbors add up to b111(7) in F2^3 arithmetic.
 * 
 * When moving to an adjecent face, 2 of the vertices are relabeling of the original ones,
 * and the other 2 can be computed using the above observation.
 */
function transitionFaceIn3d(face: Face, d: D): Face {
    switch (d) {
        case D.Right:
            return {
                tl: face.tr,
                bl: face.br,
                tr: 7 ^ face.tr ^ face.tl ^ face.br,
                br: 7 ^ face.br ^ face.bl ^ face.tr
            };
        case D.Left:
            // swap r and l from above.
            return {
                tr: face.tl,
                br: face.bl,
                tl: 7 ^ face.tl ^ face.tr ^ face.bl,
                bl: 7 ^ face.bl ^ face.br ^ face.tl
            };
        case D.Down:
            return {
                tl: face.bl,
                tr: face.br,
                bl: 7 ^ face.bl ^ face.tl ^ face.br,
                br: 7 ^ face.br ^ face.tr ^ face.bl
            };
        case D.Up:
            // swap u and d from above.
            return {
                bl: face.tl,
                br: face.tr,
                tl: 7 ^ face.tl ^ face.bl ^ face.tr,
                tr: 7 ^ face.tr ^ face.br ^ face.tl
            };
    }
}

// assuming we are passing two different orientations of the same face
// find the rotation to get face to otherFace.
function getRfromFace(face: Face, otherFace: Face): R {
    if (face.tl === otherFace.tl) return R.I;
    if (face.tl === otherFace.tr) return R.R;
    if (face.tl === otherFace.bl) return R.L;
    if (face.tl === otherFace.br) return R.H;
    throw new Error(`should not happen ${face.tl} ${otherFace}. Did you check sameFace?`);
}

function makeProb(map: string[]): Problem {
    let c = 0;
    for (let i = 0; i < map.length; i++) {
        for (let j = 0; j < map[i].length; j++) {
            if (map[i][j] !== ' ') c++;
        }
    }
    const M = Math.sqrt(c / 6);
    // find top left corner of each cube on the map
    // use `${i},${j}` as the canonical 2d map face name.
    let facesMapCoords = new Set<string>();
    for (let i = 0; i < map.length / M; i++) {
        for (let j = 0; j < map[i].length / M; j++) {
            if (map[i * M][j * M] !== ' ') {
                facesMapCoords.add(`${i},${j}`);
            }
        }
    }
    // 2d face name -> 3d face vertices
    let charts: Map<string, Face> = new Map();

    // bfs accross the map to assign the six faces.
    const q: {coord: string, face: Face}[] = [];
    let map3dto2dnames = new Map<string, string>();
    // pick a random face to start with and randomly assign it the 000,001,011,010 3D vertices.
    q.push({ coord: [...facesMapCoords.keys()][0], face: { tl: 0, tr: 1, br: 3, bl: 2 } });
    while (q.length > 0) {
        let { coord, face } = q.shift()!
        let [x, y] = coord.split(',').map(x => parseInt(x));
        if (charts.has(coord)) continue;
        for (let d of [D.Right, D.Down, D.Left, D.Up]) {
            let [nx, ny] = move(x, y, d);
            let h = `${nx},${ny}`;
            if (facesMapCoords.has(h)) {
                q.push({ coord: h, face: transitionFaceIn3d(face, d) });
            } // else we will compute this transition later, once we have all map transitions.
        }
        charts.set(coord, face);
        map3dto2dnames.set(faceName3d(face), coord);
    }

    // compute all face and direction to new face transitions
    let transitions = new Map<string, [string, R]>();
    for (let [coord, face] of charts) {
        for (let d of [D.Right, D.Down, D.Left, D.Up]) {
            let newFace = transitionFaceIn3d(face, d);
            let new3dFaceName = faceName3d(newFace);
            let new2dFaceName = map3dto2dnames.get(new3dFaceName)!;
            let rot = getRfromFace(newFace, charts.get(new2dFaceName)!)
            transitions.set(`${coord},${d}`, [new2dFaceName, rot]);
        }
    }
    return { map, xMax: map.length, yMax: map[0].length, transitions, M };
}


// rotate coordinates within a square M x M cube face
function rotate([x, y]: [number, number], rot: R, M: number) {
    switch (rot) {
        case R.I:
            return [x, y];
        case R.R:
            return [y, M - 1 - x];
        case R.L:
            return [M - 1 - y, x];
        case R.H:
            return [M - 1 - x, M - 1 - y];
    }
}

// large coordinates are the coordinates of the M x M cube faces.
// small coordinates are the coordinates within the M x M cube face.
function splitToLargeAndSmallCoords(x: number, y: number, M: number) {
    let lx = Math.floor(x / M), ly = Math.floor(y / M);
    let sx = mod(x, M), sy = mod(y, M);
    return [lx, ly, sx, sy];
}

function combineLargeAndSmallCoords(lx: number, ly: number, sx: number, sy: number, M: number): [number, number] {
    return [lx * M + sx, ly * M + sy];
}

type State = [number, number, D];
type MoveFn = (pos: State, p: Problem) => State;

// part 1
function moveOnMap([x, y, d]: State, p: Problem): State {
    let rx = x, ry = y;
    do {
        [rx, ry] = move(rx, ry, d);
        rx = mod(rx, p.xMax);
        ry = mod(ry, p.yMax);
        // keep going until we reach ground again
    } while (p.map[rx][ry] === ' ');
    return [rx, ry, d];
}

// part 2
function moveOnCube([x, y, d]: State, p: Problem): State {
    let [lx, ly, sx, sy] = splitToLargeAndSmallCoords(x, y, p.M);
    // naive move in small coords to see where we land.
    let [rx, ry] = move(sx, sy, d);
    // if within the same cube face, return raw coordinates
    if (rx >= 0 && ry >= 0 && rx < p.M && ry < p.M) {
        return [lx * p.M + rx, ly * p.M + ry, d];
    }
    // a face transition has occured
    let startCube2dFaceName = `${lx},${ly}`;
    let [newCube, rot] = p.transitions.get(`${startCube2dFaceName},${d}`)!;
    // new large coords
    let [nlx, nly] = newCube.split(',').map(x => parseInt(x));
    // mod new small coords to be within a cube face
    let nsx = mod(rx, p.M);
    let nsy = mod(ry, p.M);
    // update small coords with rotation
    [nsx, nsy] = rotate([nsx, nsy], rot, p.M);
    // compute new direction
    const newDir = rotD(d, rot);
    return [...combineLargeAndSmallCoords(nlx, nly, nsx, nsy, p.M), newDir];
}

function walk(x: number, y: number, d: D, inst: string[], p: Problem, moveF: MoveFn) {
    for (let i of inst!) {
        if (i === 'L' || i === 'R') {
            d = rotD(d, i === 'L' ? R.L : R.R);
        } else {
            let n = parseInt(i);
            for (let j = 0; j < n; j++) {
                let res = moveF([x, y, d], p);
                if (p.map[res[0]][res[1]] === '#') break;
                [x, y, d] = res;
            }
        }
    }
    return [x, y, d];
}

let lines = fs.readFileSync(0, 'utf8').split('\n');
let i = 0, p1 = 0, p2 = 0, pcount = 1;
while (i < lines.length) {
    let grid = [];
    while (lines[i] !== '' && i < lines.length) {
        grid.push(lines[i]);
        i++;
    }
    if (grid.length === 0) break;
    i++;  // empty line
    const pass = lines[i++];

    // setup map
    const maxL = grid.reduce((acc, line) => Math.max(acc, line.length), 0);
    grid = grid.map(line => line.padEnd(maxL, ' '));

    const inst = pass?.split(/([RL])/)!;
    let x = 0;
    let y = 0;
    let d = D.Right;
    while (grid[x][y] === ' ') {
        y++;
    }
    let p = makeProb(grid);
    let [xf, yf, ff] = walk(x, y, d, inst, p, moveOnMap);
    let ans1 = 1000 * (xf + 1) + 4 * (yf + 1) + ff;
    p1 += ans1;
    console.log(`problem ${pcount}: flat ${ans1}`);

    [xf, yf, ff] = walk(x, y, d, inst, p, moveOnCube);
    let ans2 = 1000 * (xf + 1) + 4 * (yf + 1) + ff;
    p2 += ans2;
    console.log(`problem ${pcount}: cube ${ans2}`);
    console.log();
    i += 1;  // empty line
    pcount += 1;
}

console.log('total: flat', p1);
console.log('total: cube', p2);